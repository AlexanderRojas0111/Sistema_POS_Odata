name: Code Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt || echo "requirements-dev.txt no encontrado, continuando..."
        pip install flake8 pytest pytest-cov bandit safety black isort
        
    - name: Create reports directory
      run: mkdir -p reports
      
    - name: Run linting with flake8
      run: |
        flake8 app/ scripts/ --max-line-length=88 --ignore=E203,W503,F401 --exclude=migrations,__pycache__,venv,.venv --format=json > reports/flake8-report.json || true
        flake8 app/ scripts/ --max-line-length=88 --ignore=E203,W503,F401 --exclude=migrations,__pycache__,venv,.venv --statistics
        
    - name: Run security check with bandit
      run: |
        bandit -r app/ -f json -o reports/bandit-report.json || true
        bandit -r app/ -ll
        
    - name: Run safety check
      run: |
        safety check --json --output reports/safety-report.json || true
        safety check
        
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short --junitxml=reports/pytest-report.xml --cov=app --cov-report=xml:reports/coverage.xml --cov-report=html:reports/htmlcov || true
        
    - name: Generate quality report
      run: |
        python scripts/generate_quality_report.py
        
    - name: Upload Quality Report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: code-quality-reports-${{ matrix.python-version }}
        path: |
          reports/
          coverage_report.md
        retention-days: 30
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: reports/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Comment PR with Quality Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          if (fs.existsSync('coverage_report.md')) {
            const report = fs.readFileSync('coverage_report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
          }

  build-and-test:
    runs-on: ubuntu-latest
    needs: code-quality-check
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Initialize database
      run: |
        python scripts/init_db.py
        
    - name: Run application tests
      run: |
        python -c "
        from app import create_app
        app = create_app('testing')
        with app.test_client() as client:
            response = client.get('/health')
            assert response.status_code == 200
            print('âœ… Application health check passed')
        "
        
    - name: Test server startup
      run: |
        timeout 10s python run_server.py &
        sleep 5
        curl -f http://localhost:5000/health || echo "Server startup test completed"
