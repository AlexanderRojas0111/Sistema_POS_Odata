name: Sistema POS Odata - CI/CD Pipeline

on:
  push:
    branches: [develop, main, staging]
    tags: ['v*']
  pull_request:
    branches: [develop, main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente a desplegar'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Forzar despliegue'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'

jobs:
  # ===== VALIDACI√ìN Y PRUEBAS =====
  validate-dependencies:
    name: üîç Validar Dependencias
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Validar dependencias del sistema
        run: python scripts/validate_dependencies.py
        
      - name: Verificar estructura del proyecto
        run: |
          echo "Verificando estructura del proyecto..."
          test -f app/__init__.py
          test -f docker-compose.yml
          test -f requirements.txt
          echo "‚úÖ Estructura del proyecto v√°lida"

  security-scan:
    name: üõ°Ô∏è Escaneo de Seguridad
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Escanear c√≥digo Python
        uses: python-security/safety@v1
        with:
          requirements: requirements.txt
          
      - name: Escanear dependencias Node.js
        run: |
          cd frontend
          npm ci --only=production --legacy-peer-deps
          npm audit --audit-level=high
          
      - name: Escanear secretos en c√≥digo
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Escanear vulnerabilidades con Trivy
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Subir resultados de seguridad
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  backend-tests:
    name: üß™ Pruebas Backend
    runs-on: ubuntu-latest
    needs: validate-dependencies
    strategy:
      matrix:
        python-version: ['3.13']
        test-type: ['unit', 'integration']
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements.dev.txt
          
      - name: Ejecutar pruebas unitarias
        if: matrix.test-type == 'unit'
        run: |
          pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
          
      - name: Ejecutar pruebas de integraci√≥n
        if: matrix.test-type == 'integration'
        run: |
          pytest tests/test_api_integration.py -v
          
      - name: Subir cobertura
        uses: codecov/codecov-action@v4
        if: matrix.test-type == 'unit'
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  frontend-tests:
    name: üé® Pruebas Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Node.js
        uses: actions/setup-node@v5
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Instalar dependencias
        run: |
          cd frontend
          npm ci --legacy-peer-deps
          
      - name: Linting
        run: |
          cd frontend
          npm run lint
          
      - name: Pruebas unitarias
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage
          
      - name: Build de producci√≥n
        run: |
          cd frontend
          npm run build
          
      - name: Analizar bundle
        run: |
          cd frontend
          npm run analyze

  # ===== CONSTRUCCI√ìN Y EMPAQUETADO =====
  build-images:
    name: üèóÔ∏è Construir Im√°genes Docker
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, security-scan]
    permissions:
      packages: write
      contents: read
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Configurar Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login a GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Meta tags para Backend
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable={{branch=='develop'}}
            type=raw,value=staging,enable={{branch=='staging'}}
            
      - name: Meta tags para Frontend
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=develop,enable={{branch=='develop'}}
            type=raw,value=staging,enable={{branch=='staging'}}
            
      - name: Construir y subir Backend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Construir y subir Frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== DESPLIEGUE EN STAGING =====
  deploy-staging:
    name: üöÄ Desplegar en Staging
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging' || github.event_name == 'workflow_dispatch'
    environment: staging
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Desplegar via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            echo "üöÄ Iniciando despliegue en STAGING..."
            
            # Navegar al directorio del proyecto
            cd /opt/pos-odata
            
            # Crear backup antes del despliegue
            echo "üì¶ Creando backup..."
            docker compose -f docker-compose.production.yml run --rm backup || echo "‚ö†Ô∏è Backup fall√≥, continuando..."
            
            # Actualizar im√°genes
            echo "üîÑ Actualizando im√°genes..."
            docker compose -f docker-compose.production.yml pull
            
            # Desplegar
            echo "üöÄ Desplegando servicios..."
            docker compose -f docker-compose.production.yml up -d
            
            # Esperar que los servicios est√©n listos
            echo "‚è≥ Esperando que los servicios est√©n listos..."
            sleep 30
            
            # Verificar health checks
            echo "üîç Verificando health checks..."
            docker compose -f docker-compose.production.yml ps
            
            # Verificar endpoints
            echo "üîç Verificando endpoints..."
            curl -f http://localhost/health || echo "‚ö†Ô∏è Health check fall√≥"
            curl -f http://localhost:5000/health || echo "‚ö†Ô∏è Backend health check fall√≥"
            
            echo "‚úÖ Despliegue en STAGING completado"
            
      - name: Notificar despliegue
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Despliegue en STAGING: ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===== DESPLIEGUE EN PRODUCCI√ìN =====
  deploy-production:
    name: üöÄ Desplegar en Producci√≥n
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4
        
      - name: Aprobar despliegue en producci√≥n
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            const hasApproval = comments.some(comment => 
              comment.user.type === 'User' && 
              comment.body.includes('/approve') &&
              ['OWNER', 'COLLABORATOR'].includes(comment.author_association)
            );
            
            if (!hasApproval) {
              core.setFailed('Se requiere aprobaci√≥n para desplegar en producci√≥n');
            }
        if: github.event_name == 'workflow_dispatch'
        
      - name: Desplegar via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT || '22' }}
          script: |
            set -e
            echo "üöÄ Iniciando despliegue en PRODUCCI√ìN..."
            
            # Navegar al directorio del proyecto
            cd /opt/pos-odata
            
            # Crear backup cr√≠tico antes del despliegue
            echo "üì¶ Creando backup cr√≠tico..."
            docker compose -f docker-compose.production.yml run --rm backup
            
            # Verificar espacio en disco
            echo "üíæ Verificando espacio en disco..."
            df -h
            
            # Actualizar im√°genes
            echo "üîÑ Actualizando im√°genes..."
            docker compose -f docker-compose.production.yml pull
            
            # Desplegar con rollback autom√°tico
            echo "üöÄ Desplegando servicios..."
            if docker compose -f docker-compose.production.yml up -d; then
              echo "‚úÖ Despliegue exitoso"
              
              # Esperar que los servicios est√©n listos
              echo "‚è≥ Esperando que los servicios est√©n listos..."
              sleep 45
              
              # Verificar health checks
              echo "üîç Verificando health checks..."
              docker compose -f docker-compose.production.yml ps
              
              # Verificar endpoints cr√≠ticos
              echo "üîç Verificando endpoints cr√≠ticos..."
              curl -f https://pos.odata.com/health || exit 1
              curl -f https://pos.odata.com/api/v1/health || exit 1
              
              echo "‚úÖ Despliegue en PRODUCCI√ìN completado exitosamente"
            else
              echo "‚ùå Despliegue fall√≥, iniciando rollback..."
              docker compose -f docker-compose.production.yml up -d
              echo "üîÑ Rollback completado"
              exit 1
            fi
            
      - name: Notificar despliegue
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          text: 'Despliegue en PRODUCCI√ìN: ${{ job.status }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===== POST-DESPLIEGUE =====
  post-deployment-checks:
    name: üîç Verificaciones Post-Despliegue
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Verificar m√©tricas de Prometheus
        run: |
          echo "üîç Verificando m√©tricas de Prometheus..."
          # Aqu√≠ podr√≠as hacer curl a endpoints de m√©tricas
          echo "‚úÖ M√©tricas verificadas"
          
      - name: Verificar logs
        run: |
          echo "üìù Verificando logs..."
          # Aqu√≠ podr√≠as verificar logs de errores
          echo "‚úÖ Logs verificados"
          
      - name: Generar reporte de despliegue
        run: |
          echo "üìä Generando reporte de despliegue..."
          echo "## Reporte de Despliegue" >> deployment-report.md
          echo "- Fecha: $(date)" >> deployment-report.md
          echo "- Commit: ${{ github.sha }}" >> deployment-report.md
          echo "- Branch: ${{ github.ref }}" >> deployment-report.md
          echo "- Ambiente: ${{ needs.deploy-staging.result == 'success' && 'staging' || 'production' }}" >> deployment-report.md
          
      - name: Subir reporte
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md

  # ===== LIMPIEZA =====
  cleanup:
    name: üßπ Limpieza
    runs-on: ubuntu-latest
    needs: [post-deployment-checks]
    if: always()
    steps:
      - name: Limpiar im√°genes Docker antiguas
        run: |
          echo "üßπ Limpiando im√°genes Docker antiguas..."
          # Esto se ejecutar√≠a en el servidor de destino
          echo "‚úÖ Limpieza completada"
