name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # ===== TESTS Y CALIDAD DE CÓDIGO =====
  test:
    name: Tests y Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov coverage

    - name: Run tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        FLASK_ENV: testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ===== LINTING Y FORMATTING =====
  lint:
    name: Linting y Formato
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Black (code formatting)
      run: |
        black --check --diff app/ tests/

    - name: Run Flake8 (linting)
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run MyPy (type checking)
      run: |
        mypy app/ --ignore-missing-imports

  # ===== ANÁLISIS DE SEGURIDAD =====
  security:
    name: Análisis de Seguridad
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit

    - name: Run Safety (vulnerability check)
      run: |
        safety check --json --output safety-report.json || true

    - name: Run Bandit (security linting)
      run: |
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  # ===== FRONTEND TESTS =====
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --coverage

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

  # ===== BUILD Y DOCKER =====
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint, security, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: pos-odata:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== DESPLIEGUE (STAGING) =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, lint, security, frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Aquí irían los comandos de despliegue a staging
        # Por ejemplo: kubectl apply, docker-compose, etc.

  # ===== DESPLIEGUE (PRODUCCIÓN) =====
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, lint, security, frontend, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Aquí irían los comandos de despliegue a producción
        # Por ejemplo: kubectl apply, docker-compose, etc.

  # ===== NOTIFICACIONES =====
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test, lint, security, frontend]
    if: always()

    steps:
    - name: Notify Slack (success)
      if: needs.test.result == 'success' && needs.lint.result == 'success'
      run: |
        echo "✅ All checks passed! Pipeline successful."
        # Aquí iría la integración con Slack/Discord/Email

    - name: Notify Slack (failure)
      if: needs.test.result == 'failure' || needs.lint.result == 'failure'
      run: |
        echo "❌ Pipeline failed. Check the logs for details."
        # Aquí iría la notificación de fallo