name: Pull Request Check

on:
  pull_request:
    branches: [main, develop]

jobs:
  quick-check:
    name: Quick Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run quick tests
      run: |
        pytest tests/test_api.py tests/test_users.py -v

    - name: Check code formatting
      run: |
        black --check --diff app/ tests/

    - name: Run basic linting
      run: |
        flake8 app/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics

    - name: Check for security issues
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

  # ===== FRONTEND QUICK CHECK =====
  frontend-check:
    name: Frontend Quick Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false --passWithNoTests

  # ===== COMMENT ON PR =====
  comment:
    name: Comment on PR
    runs-on: ubuntu-latest
    needs: [quick-check, frontend-check]
    if: always()

    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => comment.user.type === 'Bot');
          
          const message = `## 🔍 PR Validation Results
          
          ### ✅ Quick Checks
          - **Backend Tests**: ${needs.quick-check.result === 'success' ? '✅ Passed' : '❌ Failed'}
          - **Code Formatting**: ${needs.quick-check.result === 'success' ? '✅ Passed' : '❌ Failed'}
          - **Security Check**: ${needs.quick-check.result === 'success' ? '✅ Passed' : '❌ Failed'}
          
          ### 🎨 Frontend Checks
          - **Linting**: ${needs.frontend-check.result === 'success' ? '✅ Passed' : '❌ Failed'}
          - **Tests**: ${needs.frontend-check.result === 'success' ? '✅ Passed' : '❌ Failed'}
          
          ---
          *This comment was automatically generated by the CI/CD pipeline.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message,
            });
          } 