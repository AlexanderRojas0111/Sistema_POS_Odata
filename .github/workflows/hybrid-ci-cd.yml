name: 🚀 Hybrid CI/CD Pipeline v2.0.2

on:
  push:
    branches: [ main, develop, hybrid-v2.0.2, feature/* ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '20'

jobs:
  # 🔍 Code Quality & Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🔍 Lint with Pylint
      run: |
        pylint app/ --disable=C0114,C0116,R0903 --exit-zero
        
    - name: 🎨 Format Check with Black
      run: |
        black --check app/ tests/ --diff
        
    - name: 🔒 Security Scan with Bandit
      run: |
        bandit -r app/ -f json -o bandit-report.json --exit-zero
        
    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  # 🧪 Backend Testing
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    needs: quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        
    - name: 🔧 Setup Test Environment
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379/0"
        export FLASK_ENV="testing"
        
    - name: 🧪 Run Backend Tests
      run: |
        export DATABASE_URL="postgresql://test_user:test_password@localhost:5432/test_db"
        export REDIS_URL="redis://localhost:6379/0"
        export FLASK_ENV="testing"
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
        
    - name: 📊 Upload Coverage Reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # 🎨 Frontend Testing
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install Frontend Dependencies
      working-directory: ./frontend
      run: npm ci
      
    - name: 🎨 Lint Frontend
      working-directory: ./frontend
      run: npm run lint
      
    - name: 🔍 Type Check
      working-directory: ./frontend
      run: npm run type-check
      
    - name: 🧪 Run Frontend Tests
      working-directory: ./frontend
      run: npm run test:coverage
      
    - name: 🏗️ Build Frontend
      working-directory: ./frontend
      run: npm run build

  # 🐳 Docker Build & Test
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build Backend Image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.optimized
        target: production
        push: false
        tags: pos-odata-app:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🧪 Test Docker Compose
      run: |
        # Crear archivo .env para testing
        echo "DATABASE_URL=postgresql://pos_user:test_password@db:5432/pos_db_test" > .env
        echo "REDIS_URL=redis://redis:6379/0" >> .env
        echo "FLASK_ENV=testing" >> .env
        
        # Test docker-compose build
        docker-compose -f docker-compose.production.yml build
        
    - name: 🔒 Security Scan Docker Image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: pos-odata-app:test
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 Upload Trivy Results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  # 🚀 Integration Tests
  integration-tests:
    name: 🚀 Integration Tests
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Setup Test Environment
      run: |
        # Crear archivo de entorno para testing
        cp env.example .env
        sed -i 's/development/testing/g' .env
        
        # Iniciar servicios
        docker-compose -f docker-compose.production.yml up -d db redis
        sleep 10
        
    - name: 🧪 Run Integration Tests
      run: |
        # Esperar que los servicios estén listos
        timeout 60 bash -c 'until docker-compose -f docker-compose.production.yml exec -T db pg_isready -U pos_user; do sleep 1; done'
        
        # Ejecutar tests de integración
        docker-compose -f docker-compose.production.yml run --rm app pytest tests/test_integration_pos_workflow.py -v
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.production.yml down -v

  # 📋 Health Check Validation
  health-validation:
    name: 📋 Health Check Validation
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy Test Environment
      run: |
        cp env.example .env
        docker-compose -f docker-compose.production.yml up -d
        
        # Esperar que los servicios estén listos
        sleep 30
        
    - name: 🔍 Validate Health Endpoints
      run: |
        # Test health endpoint
        curl -f http://localhost:5000/health || exit 1
        
        # Test AI health endpoint  
        curl -f http://localhost:5000/ai-test || exit 1
        
        # Test API v1 auth
        TOKEN=$(curl -s -X POST http://localhost:5000/api/v1/auth/login \
          -H "Content-Type: application/json" \
          -d '{"username":"admin","password":"admin"}' | \
          jq -r '.access_token')
          
        if [ "$TOKEN" != "null" ]; then
          echo "✅ Authentication working"
          
          # Test protected endpoint
          curl -f -H "Authorization: Bearer $TOKEN" \
            http://localhost:5000/api/v1/auth/profile || exit 1
        fi
        
    - name: 📊 System Status Report
      if: always()
      run: |
        echo "=== CONTAINER STATUS ==="
        docker ps
        
        echo "=== APPLICATION LOGS ==="
        docker logs pos-odata-app --tail 50
        
        echo "=== DATABASE STATUS ==="
        docker exec pos-odata-db pg_isready -U pos_user
        
    - name: 🧹 Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.production.yml down -v

  # 🎯 Deployment (solo en main)
  deploy:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [health-validation]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy Notification
      run: |
        echo "🎉 All tests passed! Ready for production deployment."
        echo "📋 Deployment Summary:"
        echo "- ✅ Code quality validated"
        echo "- ✅ Backend tests passed"
        echo "- ✅ Frontend tests passed"
        echo "- ✅ Docker build successful"
        echo "- ✅ Integration tests passed"
        echo "- ✅ Health checks validated"
        echo "- 🚀 Ready for production!"

  # 📊 Status Report
  status-report:
    name: 📊 Pipeline Status Report
    runs-on: ubuntu-latest
    needs: [quality, backend-tests, frontend-tests, docker-build, integration-tests, health-validation]
    if: always()
    
    steps:
    - name: 📊 Generate Status Report
      run: |
        echo "# 🚀 Hybrid CI/CD Pipeline Report v2.0.2" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.quality.result }}" == "success" ]; then
          echo "- ✅ **Code Quality**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Code Quality**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.backend-tests.result }}" == "success" ]; then
          echo "- ✅ **Backend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Backend Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.frontend-tests.result }}" == "success" ]; then
          echo "- ✅ **Frontend Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Frontend Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.docker-build.result }}" == "success" ]; then
          echo "- ✅ **Docker Build**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Docker Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.integration-tests.result }}" == "success" ]; then
          echo "- ✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.health-validation.result }}" == "success" ]; then
          echo "- ✅ **Health Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ **Health Validation**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🎯 Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "- 📋 Review test results and coverage reports" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 Check security scan results" >> $GITHUB_STEP_SUMMARY  
        echo "- 🚀 Deploy to production if all checks pass" >> $GITHUB_STEP_SUMMARY
