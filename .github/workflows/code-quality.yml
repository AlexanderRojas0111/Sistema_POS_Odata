name: Code Quality Monitor

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Ejecutar semanalmente los lunes a las 9:00 AM UTC
    - cron: '0 9 * * 1'

jobs:
  code-quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest radon flake8
    
    - name: Run Code Quality Monitor
      id: quality_check
      run: |
        python scripts/code_quality_monitor.py
        echo "quality_score=$(python -c "import json; print(json.load(open('reports/code_quality_report_latest.json'))['overall']['score'])")" >> $GITHUB_OUTPUT
      continue-on-error: true
    
    - name: Run Flake8 Linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=15 --max-line-length=127 --statistics
    
    - name: Run Radon Complexity Check
      run: |
        radon cc app/ -a -nc --total-average
        radon cc app/ -nc --min=B  # Solo mostrar funciones con complejidad B o mayor
    
    - name: Check for TODOs
      run: |
        echo "üîç Buscando TODOs pendientes..."
        TODO_COUNT=$(grep -r "TODO\|FIXME\|XXX\|HACK\|BUG" app/ --exclude-dir=__pycache__ | wc -l || echo "0")
        echo "TODOs encontrados: $TODO_COUNT"
        if [ "$TODO_COUNT" -gt "5" ]; then
          echo "‚ùå Demasiados TODOs pendientes ($TODO_COUNT > 5)"
          grep -r "TODO\|FIXME\|XXX" app/ --exclude-dir=__pycache__ || true
          exit 1
        fi
    
    - name: Run Tests with Coverage
      run: |
        coverage run --source=app -m pytest tests/ -v
        coverage report --format=markdown > coverage_report.md
        coverage report --fail-under=70
    
    - name: Quality Gate Check
      run: |
        QUALITY_SCORE=${{ steps.quality_check.outputs.quality_score }}
        echo "Puntuaci√≥n de calidad: $QUALITY_SCORE"
        
        if [ "$QUALITY_SCORE" -lt "70" ]; then
          echo "‚ùå Quality Gate FAILED: Puntuaci√≥n demasiado baja ($QUALITY_SCORE < 70)"
          exit 1
        elif [ "$QUALITY_SCORE" -lt "80" ]; then
          echo "‚ö†Ô∏è  Quality Gate WARNING: Puntuaci√≥n mejorable ($QUALITY_SCORE < 80)"
        else
          echo "‚úÖ Quality Gate PASSED: Excelente calidad ($QUALITY_SCORE >= 80)"
        fi
    
    - name: Upload Quality Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: code-quality-report
        path: |
          reports/code_quality_report_*.json
          coverage_report.md
        retention-days: 30
    
    - name: Comment PR with Quality Report
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Leer reporte de calidad
          const reportFiles = fs.readdirSync('reports/').filter(f => f.startsWith('code_quality_report_'));
          if (reportFiles.length === 0) return;
          
          const report = JSON.parse(fs.readFileSync(`reports/${reportFiles[0]}`, 'utf8'));
          const score = report.overall.score;
          const status = report.overall.status;
          
          // Leer cobertura
          let coverageContent = '';
          if (fs.existsSync('coverage_report.md')) {
            coverageContent = fs.readFileSync('coverage_report.md', 'utf8');
          }
          
          const comment = `## üìä Reporte de Calidad de C√≥digo
          
          **Puntuaci√≥n General:** ${score}/100 ${status}
          
          | M√©trica | Objetivo | Actual | Estado |
          |---------|----------|---------|---------|
          | Duplicaci√≥n | < 5% | ${report.duplication.percentage.toFixed(1)}% | ${report.duplication.status} |
          | Complejidad Promedio | < 5 | ${report.complexity.average.toFixed(1)} | ${report.complexity.status} |
          | Funciones Largas | 0 | ${report.function_length.count} | ${report.function_length.status} |
          | Cobertura Tests | > 80% | ${report.coverage.coverage.toFixed(1)}% | ${report.coverage.status} |
          | TODOs Pendientes | 0 | ${report.todos.count} | ${report.todos.status} |
          
          ### üî¥ Problemas Cr√≠ticos
          ${report.complexity.complex_functions.length > 0 ? `- ${report.complexity.complex_functions.length} funciones con complejidad > 10` : ''}
          ${report.function_length.long_functions.length > 0 ? `- ${report.function_length.long_functions.length} funciones con > 30 l√≠neas` : ''}
          ${report.todos.todos.length > 0 ? `- ${report.todos.todos.length} TODOs pendientes` : ''}
          
          <details>
          <summary>üìà Cobertura de Tests</summary>
          
          ${coverageContent}
          </details>
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  notify-slack:
    needs: code-quality-check
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'schedule')
    
    steps:
    - name: Download Quality Report
      uses: actions/download-artifact@v4
      with:
        name: code-quality-report
        path: reports/
    
    - name: Notify Slack
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        # Determinar color basado en resultado
        if [ "${{ needs.code-quality-check.result }}" == "success" ]; then
          COLOR="good"
          EMOJI="‚úÖ"
        elif [ "${{ needs.code-quality-check.result }}" == "failure" ]; then
          COLOR="danger"
          EMOJI="‚ùå"
        else
          COLOR="warning"
          EMOJI="‚ö†Ô∏è"
        fi
        
        # Leer puntuaci√≥n del reporte si existe
        SCORE="N/A"
        if [ -f "reports/code_quality_report_*.json" ]; then
          SCORE=$(python -c "import json, glob; files=glob.glob('reports/code_quality_report_*.json'); print(json.load(open(files[0]))['overall']['score'] if files else 'N/A')")
        fi
        
        # Enviar notificaci√≥n a Slack
        curl -X POST -H 'Content-type: application/json' \
        --data "{
          \"attachments\": [{
            \"color\": \"$COLOR\",
            \"title\": \"$EMOJI Code Quality Check - Sistema POS O'data\",
            \"fields\": [
              {\"title\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"short\": true},
              {\"title\": \"Puntuaci√≥n\", \"value\": \"$SCORE/100\", \"short\": true},
              {\"title\": \"Commit\", \"value\": \"${{ github.sha }}\", \"short\": true},
              {\"title\": \"Resultado\", \"value\": \"${{ needs.code-quality-check.result }}\", \"short\": true}
            ],
            \"footer\": \"GitHub Actions\",
            \"ts\": $(date +%s)
          }]
        }" $SLACK_WEBHOOK_URL
