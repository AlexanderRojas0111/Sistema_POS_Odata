name: Code Quality & Security

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Lunes a las 2 AM

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'

jobs:
  # ===========================================
  # BACKEND CODE QUALITY
  # ===========================================
  backend-quality:
    name: Backend Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
        pip install bandit safety flake8 radon

    - name: Run Bandit Security Scan
      run: |
        bandit -r app/ -f json -o bandit-report.json
        bandit -r app/ -f txt

    - name: Run Safety Check
      run: |
        safety check --json --output safety-report.json
        safety check

    - name: Run Flake8 Linting
      run: |
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Radon Complexity Analysis
      run: |
        radon cc app/ -a -nc
        radon mi app/ -nc
        radon hal app/ -nc

    - name: Check for TODO/FIXME
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME\|XXX" app/ || echo "No TODO/FIXME found"

    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-quality-reports
        path: |
          bandit-report.json
          safety-report.json

  # ===========================================
  # FRONTEND CODE QUALITY
  # ===========================================
  frontend-quality:
    name: Frontend Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run ESLint
      working-directory: ./frontend
      run: npm run lint

    - name: Run Prettier Check
      working-directory: ./frontend
      run: npm run format:check

    - name: Run TypeScript Check
      working-directory: ./frontend
      run: npm run type-check

    - name: Run Bundle Analysis
      working-directory: ./frontend
      run: |
        npm run build
        npm run analyze || echo "Bundle analysis not configured"

    - name: Check for TODO/FIXME
      working-directory: ./frontend
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME\|XXX" src/ || echo "No TODO/FIXME found"

  # ===========================================
  # DEPENDENCY SCANNING
  # ===========================================
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Install Node dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run Python dependency scan
      run: |
        safety check --json --output python-deps-report.json
        pip-audit --format=json --output=python-audit-report.json || true

    - name: Run Node dependency scan
      working-directory: ./frontend
      run: |
        npm audit --json > node-audit-report.json || true
        npm audit

    - name: Upload dependency reports
      uses: actions/upload-artifact@v3
      with:
        name: dependency-scan-reports
        path: |
          python-deps-report.json
          python-audit-report.json
          frontend/node-audit-report.json

  # ===========================================
  # PERFORMANCE TESTING
  # ===========================================
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Start application
      run: |
        export FLASK_ENV=testing
        export DATABASE_URL=sqlite:///test.db
        export REDIS_URL=redis://localhost:6379/0
        export SECRET_KEY=test-secret-key
        python main.py &
        sleep 10

    - name: Run performance tests
      run: |
        # Crear archivo de configuración de Locust
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between

        class WebsiteUser(HttpUser):
            wait_time = between(1, 3)
            
            @task(3)
            def health_check(self):
                self.client.get("/api/v1/health")
            
            @task(2)
            def get_products(self):
                self.client.get("/api/v1/products")
            
            @task(1)
            def get_metrics(self):
                self.client.get("/api/v1/monitoring/metrics")
        EOF
        
        # Ejecutar test de carga
        locust -f locustfile.py --headless -u 10 -r 2 -t 30s --html performance-report.html

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: performance-report.html

  # ===========================================
  # CODE COVERAGE REPORT
  # ===========================================
  coverage-report:
    name: Code Coverage Report
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run tests with coverage
      run: |
        pytest tests/ -v --cov=app --cov-report=xml --cov-report=html --cov-fail-under=70

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: quality
        name: quality-coverage

    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  # ===========================================
  # QUALITY GATE
  # ===========================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-quality, frontend-quality, dependency-scan, performance-test, coverage-report]
    if: always()

    steps:
    - name: Check quality results
      run: |
        echo "Checking quality gate results..."
        
        # Verificar que todos los jobs pasaron
        if [[ "${{ needs.backend-quality.result }}" != "success" ]]; then
          echo "❌ Backend quality check failed"
          exit 1
        fi
        
        if [[ "${{ needs.frontend-quality.result }}" != "success" ]]; then
          echo "❌ Frontend quality check failed"
          exit 1
        fi
        
        if [[ "${{ needs.dependency-scan.result }}" != "success" ]]; then
          echo "❌ Dependency scan failed"
          exit 1
        fi
        
        if [[ "${{ needs.coverage-report.result }}" != "success" ]]; then
          echo "❌ Coverage report failed"
          exit 1
        fi
        
        echo "✅ All quality checks passed!"
        echo "🎉 Quality gate successful!"
