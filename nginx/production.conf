# Configuración de Nginx para Sistema POS Odata - Producción
# Dominio: pos.odata.com
# Puerto: 80 (HTTP) y 443 (HTTPS)

# Configuración del servidor HTTP (redirección a HTTPS)
server {
    listen 80;
    server_name pos.odata.com www.pos.odata.com;
    
    # Redirección automática a HTTPS
    return 301 https://$server_name$request_uri;
}

# Configuración del servidor HTTPS principal
server {
    listen 443 ssl http2;
    server_name pos.odata.com www.pos.odata.com;
    
    # Configuración SSL/TLS
    ssl_certificate /etc/nginx/ssl/pos.odata.com.crt;
    ssl_certificate_key /etc/nginx/ssl/pos.odata.com.key;
    
    # Configuración SSL moderna y segura
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload" always;
    
    # Headers de seguridad adicionales
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' https:; frame-ancestors 'none';" always;
    
    # Configuración de logs
    access_log /var/log/nginx/pos.odata.com.access.log;
    error_log /var/log/nginx/pos.odata.com.error.log;
    
    # Configuración de compresión
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;

    # Configuración de rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;
    
    # Configuración de timeouts
    client_max_body_size 10M;
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;
    
    # Configuración de proxy
    proxy_connect_timeout 30s;
    proxy_send_timeout 30s;
    proxy_read_timeout 30s;
    proxy_buffering on;
    proxy_buffer_size 4k;
    proxy_buffers 8 4k;
    
    # Configuración de headers para proxy
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Port $server_port;
    
    # Ruta raíz - Frontend React
    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
        
        # Cache para archivos estáticos
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
        }
        
        # Cache para HTML
        location ~* \.html$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
    }
    
    # API Backend Flask
    location /api/ {
        # Rate limiting para API
        limit_req zone=api burst=20 nodelay;
        
        # Proxy al backend Flask
        proxy_pass http://app:5000;
        
        # Headers específicos para API
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
        add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization" always;
        add_header Access-Control-Expose-Headers "Content-Length,Content-Range" always;
        
        # Manejo de preflight OPTIONS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
            add_header Access-Control-Allow-Headers "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain; charset=utf-8';
            add_header Content-Length 0;
            return 204;
        }
    }
    
    # Endpoint de health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Endpoint de status para monitoreo
    location /status {
        access_log off;
        stub_status on;
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
    }
    
    # Protección de archivos sensibles
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Protección de archivos de configuración
    location ~* \.(env|conf|config|ini|log|sql|bak|backup)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # Manejo de errores personalizados
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }
}

# Configuración del servidor de staging (si es necesario)
    server {
    listen 80;
    server_name staging.pos.odata.com;
    
    # Redirección a producción o mostrar mensaje de staging
    return 301 https://pos.odata.com$request_uri;
}

# Configuración para monitoreo interno (Prometheus, Grafana)
server {
    listen 8080;
    server_name pos.odata.com;
    
    # Solo acceso desde redes internas
    allow 127.0.0.1;
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # Métricas de Prometheus
    location /metrics {
        proxy_pass http://app:5000/metrics;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Dashboard de Grafana
    location /grafana/ {
        proxy_pass http://grafana:3000/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

    # Prometheus
    location /prometheus/ {
        proxy_pass http://prometheus:9090/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Configuración de upstream para balanceo de carga (futuro)
upstream backend_servers {
    server app:5000 max_fails=3 fail_timeout=30s;
    # server app2:5000 max_fails=3 fail_timeout=30s;  # Para escalabilidad futura
    # server app3:5000 max_fails=3 fail_timeout=30s;  # Para escalabilidad futura
    
    # Configuración de health check
    keepalive 32;
}

# Configuración de upstream para frontend (futuro)
upstream frontend_servers {
    server frontend:80 max_fails=3 fail_timeout=30s;
    # server frontend2:80 max_fails=3 fail_timeout=30s;  # Para escalabilidad futura
    
    # Configuración de health check
    keepalive 32;
}

# Configuración de logs centralizados
log_format pos_log '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" '
                   'rt=$request_time uct="$upstream_connect_time" '
                   'uht="$upstream_header_time" urt="$upstream_response_time"';

# Configuración de rate limiting global
limit_req_zone $binary_remote_addr zone=global:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=api_global:10m rate=1000r/m;

# Configuración de rate limiting por IP
limit_req_zone $binary_remote_addr zone=per_ip:10m rate=10r/s;

# Configuración de rate limiting para login
limit_req_zone $binary_remote_addr zone=login_global:10m rate=10r/m;

# Configuración de rate limiting para uploads
limit_req_zone $binary_remote_addr zone=upload:10m rate=5r/m; 