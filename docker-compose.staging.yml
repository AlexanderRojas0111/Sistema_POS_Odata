version: '3.8'

services:
  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pos-odata-staging-app
    restart: unless-stopped
    environment:
      - FLASK_ENV=staging
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@staging-db:5432/pos_odata_staging
      - REDIS_URL=redis://staging-redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=https://staging.pos-odata.com,https://admin-staging.pos-odata.com
      - LOG_LEVEL=INFO
    ports:
      - "5000:5000"
    depends_on:
      - staging-db
      - staging-redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL
  staging-db:
    image: postgres:13
    container_name: pos-odata-staging-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=pos_odata_staging
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - staging-postgres-data:/var/lib/postgresql/data
      - ./scripts/init-staging-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5433:5432"  # Puerto diferente para evitar conflictos
    networks:
      - staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis para cache y sesiones
  staging-redis:
    image: redis:6-alpine
    container_name: pos-odata-staging-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - staging-redis-data:/data
    ports:
      - "6380:6379"  # Puerto diferente para evitar conflictos
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Nginx como reverse proxy
  staging-nginx:
    image: nginx:alpine
    container_name: pos-odata-staging-nginx
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - app
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React
  staging-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pos-odata-staging-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=https://staging.pos-odata.com/api
      - REACT_APP_ENVIRONMENT=staging
    ports:
      - "3001:3000"
    depends_on:
      - app
    networks:
      - staging-network

  # Monitoreo con Prometheus
  staging-prometheus:
    image: prom/prometheus:latest
    container_name: pos-odata-staging-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - staging-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - staging-network

  # Grafana para visualización
  staging-grafana:
    image: grafana/grafana:latest
    container_name: pos-odata-staging-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    ports:
      - "3002:3000"
    volumes:
      - staging-grafana-data:/var/lib/grafana
      - ./monitoring/grafana-staging:/etc/grafana/provisioning
    depends_on:
      - staging-prometheus
    networks:
      - staging-network

volumes:
  staging-postgres-data:
    driver: local
  staging-redis-data:
    driver: local
  staging-prometheus-data:
    driver: local
  staging-grafana-data:
    driver: local

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 