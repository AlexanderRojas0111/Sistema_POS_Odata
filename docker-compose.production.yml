# Docker Compose Optimizado - Sistema POS Odata

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: pos-odata-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-production-db.sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - pos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servidor Redis
  redis:
    image: redis:7-alpine
    container_name: pos-odata-redis
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AplicaciÃ³n Flask
  app:
    image: ${APP_IMAGE_NAME}:${APP_IMAGE_TAG:-latest}
    container_name: pos-odata-app
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.main:app
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
    depends_on:
      - db
      - redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/backups
    networks:
      - pos-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health", "-H", "X-Forwarded-For: 127.0.0.1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Tarea de backups diarios
  backup:
    image: postgres:15-alpine
    container_name: pos-odata-backup
    depends_on:
      - db
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - ./backups:/backups
    networks:
      - pos-network
    entrypoint: ["/bin/sh", "-lc"]
    command: >
      'ts=$$(date "+%Y%m%d_%H%M%S") &&
       echo "Iniciando backup: $$ts" &&
       pg_dump -h db -p 5432 -U $${POSTGRES_USER} -d $${POSTGRES_DB}
       --verbose --clean --create --if-exists
       > /backups/pos_db_backup_$${ts}.sql &&
       gzip /backups/pos_db_backup_$${ts}.sql &&
       echo "Backup comprimido: pos_db_backup_$${ts}.sql.gz" &&
       find /backups -name "*.sql*" -type f -mtime +$${BACKUP_RETENTION_DAYS:-30} -delete &&
       echo "Limpieza de backups antiguos completada" &&
       ls -la /backups/'
    restart: "no"

  # Cron para backups diarios
  backup-cron:
    image: bitnami/cron:latest
    container_name: pos-odata-backup-cron
    depends_on:
      - db
    environment:
      CRON_SCHEDULE: "0 2 * * *"
      BACKUP_COMMAND: |
        docker run --rm --network pos-odata_pos-network \
          -e PGPASSWORD=${POSTGRES_PASSWORD} \
          -e POSTGRES_USER=${POSTGRES_USER} \
          -e POSTGRES_DB=${POSTGRES_DB} \
          -e BACKUP_RETENTION_DAYS=30 \
          -v ${PWD}/backups:/backups \
          postgres:15-alpine sh -lc 'ts=$(date "+%Y%m%d_%H%M%S") && echo "Iniciando backup: ${ts}" && pg_dump -h db -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB} --verbose --clean --create --if-exists > /backups/pos_db_backup_${ts}.sql && gzip /backups/pos_db_backup_${ts}.sql && echo "Backup comprimido: pos_db_backup_${ts}.sql.gz" && find /backups -name "*.sql*" -type f -mtime +${BACKUP_RETENTION_DAYS:-30} -delete && echo "Limpieza completada"'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./backups:/backups
    networks:
      - pos-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  pos-network:
    driver: bridge
