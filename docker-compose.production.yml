version: '3.8'

services:
  # Aplicación principal (múltiples instancias)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pos-odata-prod-app
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - LOG_LEVEL=WARNING
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - production-db
      - production-redis
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Base de datos PostgreSQL (clúster)
  production-db:
    image: postgres:13
    container_name: pos-odata-prod-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - production-postgres-data:/var/lib/postgresql/data
      - ./scripts/init-production-db.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    ports:
      - "5432:5432"
    networks:
      - production-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Redis para cache y sesiones (clúster)
  production-redis:
    image: redis:6-alpine
    container_name: pos-odata-prod-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - production-redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Nginx como load balancer
  production-nginx:
    image: nginx:alpine
    container_name: pos-odata-prod-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/production.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Frontend React (múltiples instancias)
  production-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pos-odata-prod-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_SENTRY_DSN=${SENTRY_DSN}
    ports:
      - "3000:3000"
    depends_on:
      - app
    networks:
      - production-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Monitoreo con Prometheus
  production-prometheus:
    image: prom/prometheus:latest
    container_name: pos-odata-prod-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-production.yml:/etc/prometheus/prometheus.yml
      - production-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G

  # Grafana para visualización
  production-grafana:
    image: grafana/grafana:latest
    container_name: pos-odata-prod-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SERVER_ROOT_URL=${GRAFANA_URL}
    ports:
      - "3001:3000"
    volumes:
      - production-grafana-data:/var/lib/grafana
      - ./monitoring/grafana-production:/etc/grafana/provisioning
    depends_on:
      - production-prometheus
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 512M

  # Alertmanager para alertas
  production-alertmanager:
    image: prom/alertmanager:latest
    container_name: pos-odata-prod-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - production-alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    networks:
      - production-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M

  # Certbot para SSL automático
  production-certbot:
    image: certbot/certbot
    container_name: pos-odata-prod-certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ${CERTBOT_EMAIL} -d ${DOMAIN_NAME} --agree-tos
    networks:
      - production-network

volumes:
  production-postgres-data:
    driver: local
  production-redis-data:
    driver: local
  production-prometheus-data:
    driver: local
  production-grafana-data:
    driver: local
  production-alertmanager-data:
    driver: local

networks:
  production-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16 