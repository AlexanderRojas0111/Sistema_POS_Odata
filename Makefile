# ========================================================================
# Sistema POS O'Data v2.0.0 - Makefile para DevOps y QA
# ========================================================================
# Uso: make <comando>
# Ejemplo: make test-all
# ========================================================================

.PHONY: help test-all test-backend test-frontend test-performance migrate-db update-deps clean reports install-deps

# Variables
PYTHON = python
PIP = python -m pip
NPM = npm
PYTEST = pytest
PLAYWRIGHT = npx playwright

# Colores para output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
BLUE = \033[0;34m
NC = \033[0m # No Color

# Comando por defecto
help:
	@echo "$(BLUE)üöÄ Sistema POS O'Data v2.0.0 - Comandos Disponibles$(NC)"
	@echo ""
	@echo "$(GREEN)üß™ Testing y Validaci√≥n:$(NC)"
	@echo "  make test-all          - Ejecutar todos los tests (backend, frontend, performance)"
	@echo "  make test-backend      - Solo tests de backend con pytest"
	@echo "  make test-frontend     - Solo tests de frontend con Playwright"
	@echo "  make test-performance  - Solo tests de performance y stress"
	@echo "  make test-integration  - Solo tests de integraci√≥n"
	@echo ""
	@echo "$(GREEN)üõ†Ô∏è Entorno de Desarrollo:$(NC)"
	@echo "  make migrate-db        - Migrar de SQLite a PostgreSQL"
	@echo "  make setup-env         - Configurar variables de entorno"
	@echo "  make install-deps      - Instalar todas las dependencias"
	@echo ""
	@echo "$(GREEN)üì¶ Dependencias:$(NC)"
	@echo "  make update-deps       - Actualizar numpy y verificar compatibilidad"
	@echo "  make check-deps        - Verificar estado de dependencias"
	@echo ""
	@echo "$(GREEN)üìä Reportes:$(NC)"
	@echo "  make reports           - Generar todos los reportes"
	@echo "  make clean             - Limpiar archivos temporales y reportes"
	@echo ""
	@echo "$(GREEN)üîß Utilidades:$(NC)"
	@echo "  make validate-system   - Validaci√≥n completa del sistema"
	@echo "  make security-audit    - Auditor√≠a de seguridad"
	@echo "  make health-check      - Verificar salud del sistema"

# ========================================================================
# INSTALACI√ìN Y CONFIGURACI√ìN
# ========================================================================

install-deps:
	@echo "$(BLUE)üì¶ Instalando dependencias de Python...$(NC)"
	$(PIP) install -r requirements.txt
	$(PIP) install -r requirements-dev.txt
	@echo "$(BLUE)üì¶ Instalando dependencias de Frontend...$(NC)"
	cd frontend && $(NPM) install
	@echo "$(BLUE)üé≠ Instalando Playwright...$(NC)"
	cd frontend && $(PLAYWRIGHT) install
	@echo "$(GREEN)‚úÖ Todas las dependencias instaladas$(NC)"

setup-env:
	@echo "$(BLUE)üîß Configurando variables de entorno...$(NC)"
	@if [ ! -f .env ]; then \
		echo "FLASK_ENV=development" > .env; \
		echo "FLASK_DEBUG=1" >> .env; \
		echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/pos_odata_dev" >> .env; \
		echo "REDIS_URL=redis://localhost:6379/0" >> .env; \
		echo "JWT_SECRET_KEY=dev_secret_key_change_in_production" >> .env; \
		echo "SECRET_KEY=dev_secret_change_in_production" >> .env; \
		echo "LOG_LEVEL=DEBUG" >> .env; \
		echo "$(GREEN)‚úÖ Archivo .env creado$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Archivo .env ya existe$(NC)"; \
	fi

# ========================================================================
# TESTING COMPLETO
# ========================================================================

test-all: install-deps setup-env
	@echo "$(BLUE)üöÄ Ejecutando suite completa de tests...$(NC)"
	@echo "$(BLUE)‚è±Ô∏è Esto puede tomar varios minutos...$(NC)"
	$(PYTHON) scripts/run_complete_tests.py
	@echo "$(GREEN)‚úÖ Suite completa de tests ejecutada$(NC)"

test-backend: install-deps setup-env
	@echo "$(BLUE)üß™ Ejecutando tests de backend...$(NC)"
	$(PYTEST) tests/backend/ -v --cov=app --cov-report=html:reports/coverage --cov-report=xml:reports/coverage.xml --cov-report=term-missing --cov-fail-under=80
	@echo "$(GREEN)‚úÖ Tests de backend completados$(NC)"

test-frontend: install-deps
	@echo "$(BLUE)üé® Ejecutando tests de frontend...$(NC)"
	cd frontend && $(PLAYWRIGHT) test --reporter=html
	@echo "$(GREEN)‚úÖ Tests de frontend completados$(NC)"

test-performance: install-deps setup-env
	@echo "$(BLUE)‚ö° Ejecutando tests de performance...$(NC)"
	$(PYTHON) scripts/performance_tests.py
	@echo "$(GREEN)‚úÖ Tests de performance completados$(NC)"

test-integration: install-deps setup-env
	@echo "$(BLUE)üîó Ejecutando tests de integraci√≥n...$(NC)"
	$(PYTEST) tests/integration/ -v --cov=app --cov-append
	@echo "$(GREEN)‚úÖ Tests de integraci√≥n completados$(NC)"

# ========================================================================
# MIGRACI√ìN Y BASE DE DATOS
# ========================================================================

migrate-db: install-deps setup-env
	@echo "$(BLUE)üóÑÔ∏è Migrando de SQLite a PostgreSQL...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è Aseg√∫rate de que PostgreSQL est√© ejecut√°ndose$(NC)"
	$(PYTHON) scripts/migrate_to_postgresql.py
	@echo "$(GREEN)‚úÖ Migraci√≥n completada$(NC)"

# ========================================================================
# ACTUALIZACI√ìN DE DEPENDENCIAS
# ========================================================================

update-deps: install-deps
	@echo "$(BLUE)üîÑ Actualizando dependencias...$(NC)"
	$(PYTHON) scripts/update_dependencies.py
	@echo "$(GREEN)‚úÖ Dependencias actualizadas$(NC)"

check-deps:
	@echo "$(BLUE)üîç Verificando estado de dependencias...$(NC)"
	$(PIP) list --outdated
	@echo "$(GREEN)‚úÖ Verificaci√≥n completada$(NC)"

# ========================================================================
# VALIDACI√ìN Y AUDITOR√çA
# ========================================================================

validate-system: install-deps setup-env
	@echo "$(BLUE)üîç Validando sistema completo...$(NC)"
	$(PYTHON) scripts/validate_system.py
	@echo "$(GREEN)‚úÖ Validaci√≥n completada$(NC)"

security-audit: install-deps
	@echo "$(BLUE)üîí Ejecutando auditor√≠a de seguridad...$(NC)"
	$(PYTHON) scripts/security_audit.py
	@echo "$(GREEN)‚úÖ Auditor√≠a de seguridad completada$(NC)"

health-check: setup-env
	@echo "$(BLUE)üè• Verificando salud del sistema...$(NC)"
	@echo "$(BLUE)üîç Verificando PostgreSQL...$(NC)"
	@if command -v psql >/dev/null 2>&1; then \
		psql $(shell grep DATABASE_URL .env | cut -d '=' -f2) -c "SELECT version();" >/dev/null 2>&1 && echo "$(GREEN)‚úÖ PostgreSQL: OK$(NC)" || echo "$(RED)‚ùå PostgreSQL: Error$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è psql no disponible$(NC)"; \
	fi
	@echo "$(BLUE)üîç Verificando Redis...$(NC)"
	@if command -v redis-cli >/dev/null 2>&1; then \
		redis-cli ping >/dev/null 2>&1 && echo "$(GREEN)‚úÖ Redis: OK$(NC)" || echo "$(RED)‚ùå Redis: Error$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è redis-cli no disponible$(NC)"; \
	fi
	@echo "$(BLUE)üîç Verificando Python...$(NC)"
	@$(PYTHON) --version && echo "$(GREEN)‚úÖ Python: OK$(NC)" || echo "$(RED)‚ùå Python: Error$(NC)"
	@echo "$(GREEN)‚úÖ Verificaci√≥n de salud completada$(NC)"

# ========================================================================
# REPORTES Y LIMPIEZA
# ========================================================================

reports:
	@echo "$(BLUE)üìä Generando reportes...$(NC)"
	@mkdir -p reports
	@if [ -f scripts/run_complete_tests.py ]; then \
		echo "$(BLUE)üìã Generando reporte de tests...$(NC)"; \
		$(PYTHON) scripts/run_complete_tests.py --report-only; \
	fi
	@if [ -f scripts/performance_tests.py ]; then \
		echo "$(BLUE)‚ö° Generando reporte de performance...$(NC)"; \
		$(PYTHON) scripts/performance_tests.py --report-only; \
	fi
	@echo "$(GREEN)‚úÖ Reportes generados en directorio reports/$(NC)"

clean:
	@echo "$(BLUE)üßπ Limpiando archivos temporales...$(NC)"
	@find . -type f -name "*.pyc" -delete
	@find . -type d -name "__pycache__" -delete
	@find . -type f -name "*.log" -delete
	@find . -type f -name "temp_*.py" -delete
	@rm -rf reports/
	@rm -rf .pytest_cache/
	@rm -rf frontend/node_modules/
	@rm -rf frontend/.next/
	@rm -rf frontend/coverage/
	@echo "$(GREEN)‚úÖ Limpieza completada$(NC)"

clean-reports:
	@echo "$(BLUE)üóëÔ∏è Limpiando reportes...$(NC)"
	@rm -rf reports/
	@echo "$(GREEN)‚úÖ Reportes eliminados$(NC)"

# ========================================================================
# DESARROLLO Y DEBUG
# ========================================================================

dev-setup: install-deps setup-env
	@echo "$(BLUE)üöÄ Configurando entorno de desarrollo...$(NC)"
	@echo "$(GREEN)‚úÖ Entorno de desarrollo configurado$(NC)"
	@echo "$(BLUE)üìã Comandos √∫tiles:$(NC)"
	@echo "  make test-backend      - Ejecutar tests de backend"
	@echo "  make test-frontend     - Ejecutar tests de frontend"
	@echo "  make health-check      - Verificar salud del sistema"

dev-server: dev-setup
	@echo "$(BLUE)üåê Iniciando servidor de desarrollo...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è Aseg√∫rate de que PostgreSQL y Redis est√©n ejecut√°ndose$(NC)"
	$(PYTHON) app/main.py

# ========================================================================
# PRODUCCI√ìN
# ========================================================================

prod-setup: install-deps
	@echo "$(BLUE)üè≠ Configurando entorno de producci√≥n...$(NC)"
	@if [ ! -f .env.production ]; then \
		echo "$(RED)‚ùå Archivo .env.production no encontrado$(NC)"; \
		echo "$(YELLOW)‚ö†Ô∏è Crea el archivo .env.production con las variables de producci√≥n$(NC)"; \
		exit 1; \
	fi
	@echo "$(GREEN)‚úÖ Entorno de producci√≥n configurado$(NC)"

prod-deploy: prod-setup
	@echo "$(BLUE)üöÄ Desplegando en producci√≥n...$(NC)"
	$(PYTHON) deploy_production.py
	@echo "$(GREEN)‚úÖ Despliegue completado$(NC)"

# ========================================================================
# MONITOREO Y M√âTRICAS
# ========================================================================

monitor: setup-env
	@echo "$(BLUE)üìä Iniciando monitoreo del sistema...$(NC)"
	@echo "$(BLUE)üîç M√©tricas disponibles:$(NC)"
	@echo "  - Uso de CPU y memoria"
	@echo "  - Latencia de base de datos"
	@echo "  - Tiempo de respuesta de API"
	@echo "  - Estado de servicios"
	@echo "$(GREEN)‚úÖ Monitoreo iniciado$(NC)"

# ========================================================================
# BACKUP Y RECUPERACI√ìN
# ========================================================================

backup: setup-env
	@echo "$(BLUE)üíæ Creando backup del sistema...$(NC)"
	@mkdir -p backups
	@if [ -f instance/pos_odata_dev.db ]; then \
		cp instance/pos_odata_dev.db backups/backup_$(shell date +%Y%m%d_%H%M%S).db; \
		echo "$(GREEN)‚úÖ Backup de SQLite creado$(NC)"; \
	fi
	@echo "$(GREEN)‚úÖ Backup completado$(NC)"

# ========================================================================
# AYUDA Y DOCUMENTACI√ìN
# ========================================================================

docs:
	@echo "$(BLUE)üìö Generando documentaci√≥n...$(NC)"
	@if command -v sphinx-build >/dev/null 2>&1; then \
		cd docs && make html; \
		echo "$(GREEN)‚úÖ Documentaci√≥n generada$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è Sphinx no disponible, instalando...$(NC)"; \
		$(PIP) install sphinx sphinx-rtd-theme; \
		cd docs && make html; \
	fi

# ========================================================================
# COMANDOS R√ÅPIDOS
# ========================================================================

quick-test: test-backend test-frontend
	@echo "$(GREEN)‚úÖ Tests r√°pidos completados$(NC)"

quick-check: health-check
	@echo "$(GREEN)‚úÖ Verificaci√≥n r√°pida completada$(NC)"

# ========================================================================
# INFORMACI√ìN DEL SISTEMA
# ========================================================================

info:
	@echo "$(BLUE)‚ÑπÔ∏è Informaci√≥n del Sistema POS O'Data v2.0.0$(NC)"
	@echo ""
	@echo "$(BLUE)üìã Versiones:$(NC)"
	@$(PYTHON) --version
	@$(PIP) --version
	@echo ""
	@echo "$(BLUE)üì¶ Dependencias principales:$(NC)"
	@$(PIP) list | grep -E "(numpy|scikit-learn|flask|psycopg2)"
	@echo ""
	@echo "$(BLUE)üóÑÔ∏è Base de datos:$(NC)"
	@if [ -f .env ]; then \
		grep DATABASE_URL .env | cut -d '=' -f2; \
	else \
		echo "No configurado"; \
	fi
	@echo ""
	@echo "$(BLUE)üî¥ Redis:$(NC)"
	@if [ -f .env ]; then \
		grep REDIS_URL .env | cut -d '=' -f2; \
	else \
		echo "No configurado"; \
	fi

# ========================================================================
# COMANDO POR DEFECTO
# ========================================================================

.DEFAULT_GOAL := help
