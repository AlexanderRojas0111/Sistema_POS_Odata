# Script de Despliegue Multi-Tienda para Producci√≥n
# ==================================================
# Sistema POS Sabrositas v2.0.0 - Enterprise Multi-Store Deployment

param(
    [switch]$InitDatabase,
    [switch]$SkipFrontend,
    [switch]$SkipBackend,
    [switch]$SkipMonitoring,
    [string]$Environment = "production"
)

Write-Host "üöÄ DESPLEGANDO SISTEMA MULTI-TIENDA POS SABROSITAS v2.0.0" -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Green
Write-Host "üè™ Enterprise Multi-Store Production Environment" -ForegroundColor Yellow
Write-Host "=================================================================" -ForegroundColor Green

# Funci√≥n para mostrar errores
function Show-Error {
    param([string]$Message)
    Write-Host "‚ùå ERROR: $Message" -ForegroundColor Red
    exit 1
}

# Funci√≥n para mostrar √©xito
function Show-Success {
    param([string]$Message)
    Write-Host "‚úÖ $Message" -ForegroundColor Green
}

# Funci√≥n para mostrar informaci√≥n
function Show-Info {
    param([string]$Message)
    Write-Host "‚ÑπÔ∏è  $Message" -ForegroundColor Cyan
}

# Funci√≥n para mostrar advertencia
function Show-Warning {
    param([string]$Message)
    Write-Host "‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

Write-Host ""
Show-Info "FASE 1: VALIDACI√ìN DE ENTORNO DE PRODUCCI√ìN"
Write-Host ""

# Verificar Docker
try {
    $dockerVersion = docker --version
    Show-Success "Docker: $dockerVersion"
} catch {
    Show-Error "Docker no encontrado. Instale Docker Desktop."
}

# Verificar Docker Compose
try {
    $dockerComposeVersion = docker-compose --version
    Show-Success "Docker Compose: $dockerComposeVersion"
} catch {
    Show-Error "Docker Compose no encontrado."
}

# Verificar archivos necesarios para producci√≥n
$requiredFiles = @(
    "docker-compose.production.yml",
    "env.production.template",
    "requirements.txt",
    "main.py",
    "scripts/init-db.sql",
    "scripts/init_production_multistore.py"
)

foreach ($file in $requiredFiles) {
    if (Test-Path $file) {
        Show-Success "Archivo encontrado: $file"
    } else {
        Show-Error "Archivo requerido no encontrado: $file"
    }
}

Write-Host ""
Show-Info "FASE 2: PREPARACI√ìN DE CONFIGURACI√ìN DE PRODUCCI√ìN"
Write-Host ""

# Crear archivo de entorno de producci√≥n
if (-not (Test-Path ".env.production")) {
    Copy-Item "env.production.template" ".env.production"
    Show-Success "Archivo .env.production creado desde template"
    Show-Warning "IMPORTANTE: Configure las variables de entorno en .env.production antes de continuar"
    Show-Info "Editando variables cr√≠ticas..."
    
    # Generar claves seguras
    $secretKey = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    $jwtKey = [System.Web.Security.Membership]::GeneratePassword(32, 8)
    $redisPassword = [System.Web.Security.Membership]::GeneratePassword(16, 4)
    $postgresPassword = [System.Web.Security.Membership]::GeneratePassword(20, 6)
    
    # Actualizar archivo .env.production con valores seguros
    (Get-Content ".env.production") |
    ForEach-Object {
        $_ -replace "pos-sabrositas-2024-production-key-ultra-secure-32chars", $secretKey `
           -replace "jwt-sabrositas-2024-ultra-secure-production-key-32chars", $jwtKey `
           -replace "Sabrositas2024Redis!", $redisPassword `
           -replace "Sabrositas2024SecureDB!", $postgresPassword
    } | Set-Content ".env.production"
    
    Show-Success "Variables de seguridad generadas autom√°ticamente"
} else {
    Show-Info "Archivo .env.production ya existe"
}

# Crear directorios necesarios para producci√≥n
$directories = @(
    "logs", "data", "backups", "ssl", 
    "monitoring/logs", "monitoring/data",
    "postgres_data", "redis_data"
)

foreach ($dir in $directories) {
    if (-not (Test-Path $dir)) {
        New-Item -ItemType Directory -Path $dir -Force | Out-Null
        Show-Success "Directorio creado: $dir"
    }
}

Write-Host ""
Show-Info "FASE 3: CONSTRUCCI√ìN DE IM√ÅGENES ENTERPRISE"
Write-Host ""

if (-not $SkipBackend) {
    Show-Info "Construyendo imagen del backend para producci√≥n..."
    try {
        docker build -t pos-sabrositas:production -f Dockerfile .
        Show-Success "Imagen del backend construida exitosamente"
    } catch {
        Show-Error "Error construyendo imagen del backend"
    }
}

if (-not $SkipFrontend) {
    Show-Info "Construyendo frontend para producci√≥n..."
    try {
        Set-Location frontend
        
        if (-not (Test-Path "node_modules")) {
            Show-Info "Instalando dependencias del frontend..."
            npm install --production
        }
        
        Show-Info "Construyendo frontend optimizado para producci√≥n..."
        $env:NODE_ENV = "production"
        npm run build:production
        Show-Success "Frontend construido exitosamente"
        
        Set-Location ..
    } catch {
        Show-Error "Error construyendo frontend"
    }
}

Write-Host ""
Show-Info "FASE 4: DESPLIEGUE DE INFRAESTRUCTURA DE PRODUCCI√ìN"
Write-Host ""

# Detener servicios existentes
Show-Info "Deteniendo servicios existentes..."
try {
    docker-compose -f docker-compose.production.yml down --remove-orphans
    Show-Success "Servicios existentes detenidos"
} catch {
    Show-Info "No hay servicios previos para detener"
}

# Limpiar vol√∫menes si se solicita reinicializaci√≥n de BD
if ($InitDatabase) {
    Show-Warning "Eliminando datos de base de datos existentes..."
    docker-compose -f docker-compose.production.yml down -v
    Show-Info "Vol√∫menes eliminados - se realizar√° inicializaci√≥n completa"
}

# Iniciar servicios de producci√≥n
Show-Info "Iniciando servicios de producci√≥n multi-tienda..."
try {
    docker-compose -f docker-compose.production.yml up -d --build
    Show-Success "Servicios iniciados exitosamente"
} catch {
    Show-Error "Error iniciando servicios"
}

Write-Host ""
Show-Info "FASE 5: INICIALIZACI√ìN DE BASE DE DATOS MULTI-TIENDA"
Write-Host ""

# Esperar a que PostgreSQL est√© listo
Show-Info "Esperando a que PostgreSQL est√© listo..."
$maxAttempts = 30
$attempt = 1

while ($attempt -le $maxAttempts) {
    try {
        $pgStatus = docker exec pos-postgres-production pg_isready -U pos_user -d pos_odata
        if ($pgStatus -match "accepting connections") {
            Show-Success "PostgreSQL est√° listo"
            break
        }
    } catch {
        Show-Info "Intento $attempt de $maxAttempts`: PostgreSQL a√∫n no est√° listo..."
        Start-Sleep -Seconds 5
        $attempt++
    }
}

if ($attempt -gt $maxAttempts) {
    Show-Error "PostgreSQL no respondi√≥ despu√©s de $maxAttempts intentos"
}

# Ejecutar inicializaci√≥n de base de datos multi-tienda
Show-Info "Ejecutando inicializaci√≥n de base de datos multi-tienda..."
try {
    docker exec pos-app-production python scripts/init_production_multistore.py
    Show-Success "Base de datos multi-tienda inicializada correctamente"
} catch {
    Show-Warning "Error en inicializaci√≥n autom√°tica. Ejecutando manualmente..."
    try {
        docker exec -it pos-app-production python scripts/init_production_multistore.py
        Show-Success "Inicializaci√≥n manual completada"
    } catch {
        Show-Error "Error en inicializaci√≥n de base de datos"
    }
}

Write-Host ""
Show-Info "FASE 6: CONFIGURACI√ìN DE MONITOREO ENTERPRISE"
Write-Host ""

if (-not $SkipMonitoring) {
    Show-Info "Configurando stack de monitoreo..."
    
    # Iniciar servicios de monitoreo
    try {
        Set-Location monitoring
        docker-compose up -d
        Show-Success "Stack de monitoreo iniciado"
        Set-Location ..
    } catch {
        Show-Warning "Error iniciando monitoreo - continuando sin monitoreo"
    }
}

Write-Host ""
Show-Info "FASE 7: VERIFICACI√ìN DE DESPLIEGUE MULTI-TIENDA"
Write-Host ""

# Esperar a que todos los servicios est√©n listos
Show-Info "Esperando a que todos los servicios est√©n listos..."
Start-Sleep -Seconds 45

# Verificar servicios cr√≠ticos
$services = @(
    @{Name="PostgreSQL"; Container="pos-postgres-production"},
    @{Name="Redis"; Container="pos-redis-production"},
    @{Name="Backend API"; Container="pos-app-production"},
    @{Name="Nginx"; Container="pos-nginx-production"}
)

foreach ($service in $services) {
    try {
        $containerStatus = docker inspect --format='{{.State.Status}}' $service.Container
        if ($containerStatus -eq "running") {
            Show-Success "$($service.Name): Contenedor ejecut√°ndose"
        } else {
            Show-Error "$($service.Name): Contenedor no est√° ejecut√°ndose ($containerStatus)"
        }
    } catch {
        Show-Error "$($service.Name): Error verificando contenedor"
    }
}

# Verificar health del backend
Show-Info "Verificando health check del sistema multi-tienda..."
$maxAttempts = 15
$attempt = 1

while ($attempt -le $maxAttempts) {
    try {
        $healthResponse = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/health" -UseBasicParsing -TimeoutSec 10
        if ($healthResponse.StatusCode -eq 200) {
            $healthData = $healthResponse.Content | ConvertFrom-Json
            Show-Success "Sistema health check: $($healthData.status)"
            Show-Info "   Database: $($healthData.database)"
            Show-Info "   Multi-Store: $($healthData.stores_count) tiendas configuradas"
            Show-Info "   Timestamp: $($healthData.timestamp)"
            break
        }
    } catch {
        Show-Info "Intento $attempt de $maxAttempts`: Sistema a√∫n no responde, esperando..."
        Start-Sleep -Seconds 10
        $attempt++
    }
}

if ($attempt -gt $maxAttempts) {
    Show-Error "Sistema no responde despu√©s de $maxAttempts intentos"
}

# Verificar tiendas configuradas
Show-Info "Verificando configuraci√≥n multi-tienda..."
try {
    $storesResponse = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/stores" -UseBasicParsing -TimeoutSec 10
    if ($storesResponse.StatusCode -eq 200) {
        $storesData = $storesResponse.Content | ConvertFrom-Json
        Show-Success "Tiendas configuradas: $($storesData.count)"
        
        foreach ($store in $storesData.stores) {
            Show-Info "   ‚Ä¢ $($store.code) - $($store.name) ($($store.store_type))"
        }
    }
} catch {
    Show-Warning "No se pudo verificar configuraci√≥n de tiendas (puede requerir autenticaci√≥n)"
}

Write-Host ""
Write-Host "üéâ DESPLIEGUE MULTI-TIENDA COMPLETADO EXITOSAMENTE" -ForegroundColor Green
Write-Host "=================================================================" -ForegroundColor Green

Write-Host ""
Show-Info "URLS DEL SISTEMA MULTI-TIENDA:"
Write-Host "   üåê Frontend:          http://localhost:80" -ForegroundColor White
Write-Host "   üîß Backend API:       http://localhost:8000" -ForegroundColor White
Write-Host "   üíö Health Check:      http://localhost:8000/api/v1/health" -ForegroundColor White
Write-Host "   üè™ Stores API:        http://localhost:8000/api/v1/stores" -ForegroundColor White
Write-Host "   üìä API Docs:          http://localhost:8000/docs" -ForegroundColor White

Write-Host ""
Show-Info "CREDENCIALES ENTERPRISE MULTI-TIENDA:"
Write-Host "   üõ°Ô∏è  SuperAdmin:       superadmin / SuperAdmin123!" -ForegroundColor White
Write-Host "   ‚öôÔ∏è  Tech Admin:       techadmin / TechAdmin123!" -ForegroundColor White
Write-Host "   üëë Business Owner:    businessowner / BusinessOwner123!" -ForegroundColor White
Write-Host "   üåê Global Admin:      globaladmin / Global123!" -ForegroundColor White
Write-Host "   üè™ Store Admin:       storeadmin1 / Store123!" -ForegroundColor White

Write-Host ""
Show-Info "TIENDAS CONFIGURADAS:"
Write-Host "   üè™ SAB001 - Sabrositas Centro (Sede Principal)" -ForegroundColor White
Write-Host "   üè™ SAB002 - Sabrositas Zona Rosa" -ForegroundColor White
Write-Host "   üè™ SAB003 - Sabrositas Unicentro" -ForegroundColor White
Write-Host "   üè™ SAB004 - Sabrositas Suba" -ForegroundColor White
Write-Host "   üì¶ SABW01 - Warehouse Centro Log√≠stico" -ForegroundColor White

Write-Host ""
Show-Info "MONITOREO Y ADMINISTRACI√ìN:"
Write-Host "   üìä Grafana:           http://localhost:3000" -ForegroundColor White
Write-Host "   üîç Prometheus:        http://localhost:9090" -ForegroundColor White
Write-Host "   üìù Logs:              docker-compose -f docker-compose.production.yml logs -f" -ForegroundColor White
Write-Host "   üóÑÔ∏è  PostgreSQL:       localhost:5432 (pos_odata)" -ForegroundColor White
Write-Host "   üöÄ Redis:             localhost:6379" -ForegroundColor White

Write-Host ""
Show-Info "COMANDOS √öTILES DE PRODUCCI√ìN:"
Write-Host "   Ver logs:             docker-compose -f docker-compose.production.yml logs -f" -ForegroundColor White
Write-Host "   Reiniciar:            docker-compose -f docker-compose.production.yml restart" -ForegroundColor White
Write-Host "   Detener:              docker-compose -f docker-compose.production.yml down" -ForegroundColor White
Write-Host "   Estado:               docker-compose -f docker-compose.production.yml ps" -ForegroundColor White
Write-Host "   Backup DB:            docker exec pos-postgres-production pg_dump -U pos_user pos_odata > backup.sql" -ForegroundColor White

Write-Host ""
Show-Info "CARACTER√çSTICAS ENTERPRISE IMPLEMENTADAS:"
Write-Host "   ‚úÖ Control de acceso multi-tienda por roles" -ForegroundColor Green
Write-Host "   ‚úÖ Base de datos PostgreSQL con auditor√≠a" -ForegroundColor Green
Write-Host "   ‚úÖ Cache Redis para optimizaci√≥n" -ForegroundColor Green
Write-Host "   ‚úÖ Nginx como proxy reverso con SSL" -ForegroundColor Green
Write-Host "   ‚úÖ Monitoreo con Prometheus + Grafana" -ForegroundColor Green
Write-Host "   ‚úÖ Backup autom√°tico de base de datos" -ForegroundColor Green
Write-Host "   ‚úÖ Logging estructurado y auditor√≠a" -ForegroundColor Green
Write-Host "   ‚úÖ Rate limiting y seguridad avanzada" -ForegroundColor Green

Write-Host ""
Write-Host "üè™ SISTEMA MULTI-TIENDA LISTO PARA PRODUCCI√ìN!" -ForegroundColor Green
Write-Host "ü•ü ¬°Listo para vender Las Arepas Cuadradas en m√∫ltiples ubicaciones!" -ForegroundColor Yellow
Write-Host "=================================================================" -ForegroundColor Green
