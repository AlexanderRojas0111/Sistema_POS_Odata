#!/usr/bin/env python3
"""
Script de validaci√≥n avanzada para archivos YAML
Sistema POS O'Data v2.0.0
"""

import yaml
import sys
import os
from typing import Dict, List, Any
import re

class YAMLConfigValidator:
    def __init__(self):
        self.errors = []
        self.warnings = []
        
    def validate_docker_compose(self, filepath: str, config: Dict[str, Any]) -> bool:
        """Validar configuraci√≥n de Docker Compose"""
        print(f"üîç Validando configuraci√≥n Docker Compose: {filepath}")
        
        # Verificar versi√≥n
        if 'version' not in config:
            self.errors.append(f"{filepath}: Falta especificar la versi√≥n de Docker Compose")
            return False
            
        version = config['version']
        if not re.match(r'^3\.[0-9]+$', version):
            self.warnings.append(f"{filepath}: Versi√≥n {version} puede no ser compatible con todas las caracter√≠sticas")
            
        # Verificar servicios
        if 'services' not in config:
            self.errors.append(f"{filepath}: No se encontraron servicios definidos")
            return False
            
        services = config['services']
        for service_name, service_config in services.items():
            # Verificar imagen o build
            if 'image' not in service_config and 'build' not in service_config:
                self.errors.append(f"{filepath}: Servicio '{service_name}' debe tener 'image' o 'build'")
                
            # Verificar healthchecks para servicios cr√≠ticos
            critical_services = ['postgres', 'redis', 'app', 'pos-app', 'sabrositas-app']
            if any(critical in service_name.lower() for critical in critical_services):
                if 'healthcheck' not in service_config:
                    self.warnings.append(f"{filepath}: Servicio cr√≠tico '{service_name}' deber√≠a tener healthcheck")
                    
            # Verificar restart policy
            if 'restart' not in service_config:
                self.warnings.append(f"{filepath}: Servicio '{service_name}' deber√≠a tener pol√≠tica de reinicio")
                
        return True
        
    def validate_prometheus_config(self, filepath: str, config: Dict[str, Any]) -> bool:
        """Validar configuraci√≥n de Prometheus"""
        print(f"üîç Validando configuraci√≥n Prometheus: {filepath}")
        
        # Verificar configuraci√≥n global
        if 'global' not in config:
            self.warnings.append(f"{filepath}: Falta configuraci√≥n global")
            
        # Verificar scrape_configs
        if 'scrape_configs' not in config:
            self.errors.append(f"{filepath}: Falta configuraci√≥n de scrape_configs")
            return False
            
        scrape_configs = config['scrape_configs']
        job_names = set()
        
        for job in scrape_configs:
            if 'job_name' not in job:
                self.errors.append(f"{filepath}: Job sin nombre definido")
                continue
                
            job_name = job['job_name']
            if job_name in job_names:
                self.errors.append(f"{filepath}: Job name duplicado: {job_name}")
            job_names.add(job_name)
            
            if 'static_configs' not in job and 'consul_configs' not in job:
                self.warnings.append(f"{filepath}: Job '{job_name}' sin configuraci√≥n de targets")
                
        return True
        
    def validate_alertmanager_config(self, filepath: str, config: Dict[str, Any]) -> bool:
        """Validar configuraci√≥n de Alertmanager"""
        print(f"üîç Validando configuraci√≥n Alertmanager: {filepath}")
        
        # Verificar route
        if 'route' not in config:
            self.errors.append(f"{filepath}: Falta configuraci√≥n de route")
            return False
            
        # Verificar receivers
        if 'receivers' not in config:
            self.errors.append(f"{filepath}: Falta configuraci√≥n de receivers")
            return False
            
        receivers = config['receivers']
        receiver_names = set()
        
        for receiver in receivers:
            if 'name' not in receiver:
                self.errors.append(f"{filepath}: Receiver sin nombre")
                continue
                
            receiver_name = receiver['name']
            if receiver_name in receiver_names:
                self.errors.append(f"{filepath}: Receiver name duplicado: {receiver_name}")
            receiver_names.add(receiver_name)
            
        return True
        
    def validate_file(self, filepath: str) -> bool:
        """Validar un archivo YAML espec√≠fico"""
        try:
            with open(filepath, 'r', encoding='utf-8') as file:
                config = yaml.safe_load(file)
                
            if config is None:
                self.warnings.append(f"{filepath}: Archivo YAML vac√≠o")
                return True
                
            # Validaciones espec√≠ficas por tipo de archivo
            if 'docker-compose' in filepath:
                return self.validate_docker_compose(filepath, config)
            elif 'prometheus' in filepath and 'scrape_configs' in config:
                return self.validate_prometheus_config(filepath, config)
            elif 'alertmanager' in filepath:
                return self.validate_alertmanager_config(filepath, config)
            else:
                print(f"‚úÖ {filepath} - Sintaxis YAML v√°lida")
                return True
                
        except yaml.YAMLError as e:
            self.errors.append(f"{filepath}: Error de sintaxis YAML: {e}")
            return False
        except Exception as e:
            self.errors.append(f"{filepath}: Error al procesar archivo: {e}")
            return False
            
    def validate_all_files(self, yaml_files: List[str]) -> bool:
        """Validar todos los archivos YAML"""
        success = True
        
        for yaml_file in yaml_files:
            if os.path.exists(yaml_file):
                if not self.validate_file(yaml_file):
                    success = False
            else:
                self.warnings.append(f"{yaml_file}: Archivo no encontrado")
                
        return success
        
    def print_report(self):
        """Imprimir reporte de validaci√≥n"""
        print("\n" + "="*60)
        print("üìã REPORTE DE VALIDACI√ìN YAML")
        print("="*60)
        
        if self.errors:
            print(f"\n‚ùå ERRORES ({len(self.errors)}):")
            for error in self.errors:
                print(f"   ‚Ä¢ {error}")
                
        if self.warnings:
            print(f"\n‚ö†Ô∏è ADVERTENCIAS ({len(self.warnings)}):")
            for warning in self.warnings:
                print(f"   ‚Ä¢ {warning}")
                
        if not self.errors and not self.warnings:
            print("\nüéâ ¬°Todos los archivos YAML est√°n correctamente configurados!")
            
        print(f"\nüìä RESUMEN:")
        print(f"   ‚Ä¢ Errores: {len(self.errors)}")
        print(f"   ‚Ä¢ Advertencias: {len(self.warnings)}")
        print("="*60)

def main():
    """Funci√≥n principal"""
    validator = YAMLConfigValidator()
    
    yaml_files = [
        'docker-compose.yml',
        'docker-compose.production.yml', 
        'docker-compose.enterprise.yml',
        '.pre-commit-config.yaml',
        'monitoring/docker-compose.yml',
        'monitoring/prometheus.yml',
        'monitoring/prometheus/prometheus.yml',
        'monitoring/loki-config.yml',
        'monitoring/alertmanager/alertmanager.yml',
        'monitoring/blackbox/blackbox.yml',
        'monitoring/prometheus/rules/alerts.yml',
        'monitoring/grafana/datasources/prometheus.yml'
    ]
    
    print("üöÄ Iniciando validaci√≥n avanzada de archivos YAML...")
    print("="*60)
    
    success = validator.validate_all_files(yaml_files)
    validator.print_report()
    
    return 0 if success and not validator.errors else 1

if __name__ == "__main__":
    sys.exit(main())
