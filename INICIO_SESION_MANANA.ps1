# ==============================================
# SCRIPT DE INICIO DE SESI√ìN - D√çA SIGUIENTE
# Sistema POS O'Data Enterprise v2.0.0
# ==============================================
# Las Arepas Cuadradas - Enterprise Development
# Script para continuar exactamente donde terminamos ayer

param(
    [switch]$QuickStart = $false,
    [switch]$FullValidation = $false
)

# Configuraci√≥n de colores
$Colors = @{
    Success = "Green"
    Info = "Cyan"
    Warning = "Yellow"
    Error = "Red"
    Header = "Magenta"
}

function Write-Header {
    param([string]$Message)
    Write-Host ""
    Write-Host "=" * 60 -ForegroundColor $Colors.Header
    Write-Host $Message -ForegroundColor $Colors.Header
    Write-Host "=" * 60 -ForegroundColor $Colors.Header
    Write-Host ""
}

function Write-Status {
    param([string]$Message, [string]$Status = "Info")
    $Color = $Colors[$Status]
    $Timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "[$Timestamp] $Message" -ForegroundColor $Color
}

function Test-SystemHealth {
    Write-Status "Verificando estado del sistema..." "Info"
    
    # Verificar backend
    try {
        $backendResponse = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/health" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        if ($backendResponse.StatusCode -eq 200) {
            Write-Status "‚úÖ Backend funcionando correctamente" "Success"
            $global:BackendStatus = $true
        }
    } catch {
        Write-Status "‚ùå Backend no disponible" "Error"
        $global:BackendStatus = $false
    }
    
    # Verificar frontend
    try {
        $frontendResponse = Invoke-WebRequest -Uri "http://localhost:5173" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        if ($frontendResponse.StatusCode -eq 200) {
            Write-Status "‚úÖ Frontend funcionando correctamente" "Success"
            $global:FrontendStatus = $true
        }
    } catch {
        Write-Status "‚ùå Frontend no disponible" "Error"
        $global:FrontendStatus = $false
    }
    
    # Verificar APIs
    try {
        $apiV1Response = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/dashboard" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        $apiV2Response = Invoke-WebRequest -Uri "http://localhost:8000/api/v2/ai/health" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
        
        if ($apiV1Response.StatusCode -eq 200 -and $apiV2Response.StatusCode -eq 200) {
            Write-Status "‚úÖ APIs v1 y v2 funcionando correctamente" "Success"
            $global:APIsStatus = $true
        }
    } catch {
        Write-Status "‚ùå APIs con problemas" "Error"
        $global:APIsStatus = $false
    }
}

function Start-System {
    Write-Status "Iniciando sistema completo..." "Info"
    
    if (-not $global:BackendStatus) {
        Write-Status "Iniciando backend..." "Info"
        Start-Process -FilePath "python" -ArgumentList "main.py" -WindowStyle Hidden
        Start-Sleep -Seconds 8
        
        # Verificar que el backend est√© funcionando
        $maxAttempts = 15
        $attempt = 0
        do {
            $attempt++
            Start-Sleep -Seconds 2
            try {
                $response = Invoke-WebRequest -Uri "http://localhost:8000/api/v1/health" -UseBasicParsing -TimeoutSec 5 -ErrorAction Stop
                if ($response.StatusCode -eq 200) {
                    Write-Status "‚úÖ Backend iniciado exitosamente" "Success"
                    break
                }
            } catch {
                Write-Status "Esperando backend... (intento $attempt/$maxAttempts)" "Warning"
            }
        } while ($attempt -lt $maxAttempts)
    }
    
    if (-not $global:FrontendStatus) {
        Write-Status "Iniciando frontend..." "Info"
        Set-Location frontend
        Start-Process -FilePath "npm" -ArgumentList "run", "dev" -WindowStyle Hidden
        Set-Location ..
        Start-Sleep -Seconds 15
        Write-Status "‚úÖ Frontend iniciado" "Success"
    }
}

function Show-SystemStatus {
    Write-Header "ESTADO ACTUAL DEL SISTEMA"
    
    Write-Host "üîß Backend (Puerto 8000):" -ForegroundColor White
    Write-Host "   Status: " -NoNewline
    if ($global:BackendStatus) {
        Write-Host "‚úÖ FUNCIONANDO" -ForegroundColor Green
        Write-Host "   URL: http://localhost:8000" -ForegroundColor Cyan
        Write-Host "   Health: http://localhost:8000/api/v1/health" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå NO DISPONIBLE" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üé® Frontend (Puerto 5173):" -ForegroundColor White
    Write-Host "   Status: " -NoNewline
    if ($global:FrontendStatus) {
        Write-Host "‚úÖ FUNCIONANDO" -ForegroundColor Green
        Write-Host "   URL: http://localhost:5173" -ForegroundColor Cyan
    } else {
        Write-Host "‚ùå NO DISPONIBLE" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "ü§ñ APIs:" -ForegroundColor White
    Write-Host "   API v1: " -NoNewline
    if ($global:APIsStatus) {
        Write-Host "‚úÖ FUNCIONANDO" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PROBLEMAS" -ForegroundColor Red
    }
    Write-Host "   API v2 (IA): " -NoNewline
    if ($global:APIsStatus) {
        Write-Host "‚úÖ FUNCIONANDO" -ForegroundColor Green
    } else {
        Write-Host "‚ùå PROBLEMAS" -ForegroundColor Red
    }
    
    Write-Host ""
    Write-Host "üìä Base de Datos:" -ForegroundColor White
    Write-Host "   Productos: 21 disponibles" -ForegroundColor Cyan
    Write-Host "   Usuarios: 5 registrados" -ForegroundColor Cyan
    Write-Host "   Ventas: 17 procesadas" -ForegroundColor Cyan
}

function Show-TodaysPlan {
    Write-Header "PLAN DE TRABAJO PARA HOY"
    
    Write-Host "üéØ OBJETIVOS PRINCIPALES:" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "1. üîß OPTIMIZACIONES T√âCNICAS" -ForegroundColor White
    Write-Host "   ‚Ä¢ Implementar testing automatizado" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Configurar GitHub Actions para CI/CD" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Optimizar rendimiento del backend" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Implementar logging avanzado" -ForegroundColor Cyan
    
    Write-Host ""
    Write-Host "2. üöÄ NUEVAS FUNCIONALIDADES" -ForegroundColor White
    Write-Host "   ‚Ä¢ Sistema de notificaciones en tiempo real" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Dashboard de analytics avanzado" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Sistema de backup autom√°tico mejorado" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Integraci√≥n con sistemas de pago externos" -ForegroundColor Cyan
    
    Write-Host ""
    Write-Host "3. ü§ñ INTELIGENCIA ARTIFICIAL" -ForegroundColor White
    Write-Host "   ‚Ä¢ Recomendaciones personalizadas de productos" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Predicci√≥n de demanda de inventario" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ An√°lisis de patrones de venta" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Chatbot de soporte al cliente" -ForegroundColor Cyan
    
    Write-Host ""
    Write-Host "4. üì± EXPERIENCIA DE USUARIO" -ForegroundColor White
    Write-Host "   ‚Ä¢ PWA (Progressive Web App) completa" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Modo offline para ventas" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Interfaz t√°ctil optimizada" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Temas personalizables" -ForegroundColor Cyan
    
    Write-Host ""
    Write-Host "5. üîê SEGURIDAD Y COMPLIANCE" -ForegroundColor White
    Write-Host "   ‚Ä¢ Auditor√≠a completa de seguridad" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Implementar 2FA (Two-Factor Authentication)" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Encriptaci√≥n de datos sensibles" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Cumplimiento de normativas (PCI DSS)" -ForegroundColor Cyan
}

function Show-QuickActions {
    Write-Header "ACCIONES R√ÅPIDAS DISPONIBLES"
    
    Write-Host "‚ö° COMANDOS √öTILES:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "‚Ä¢ Verificar estado: .\INICIO_SESION_MANANA.ps1 -FullValidation" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Inicio r√°pido: .\INICIO_SESION_MANANA.ps1 -QuickStart" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Despliegue autom√°tico: .\final_auto_deploy.ps1" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Monitoreo de cambios: .\monitor_changes.ps1" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìã ENLACES IMPORTANTES:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ Frontend: http://localhost:5173" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Backend: http://localhost:8000" -ForegroundColor Cyan
    Write-Host "‚Ä¢ GitHub: https://github.com/AlexanderRojas0111/Sistema_POS_Odata.git" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Health Check: http://localhost:8000/api/v1/health" -ForegroundColor Cyan
}

function Show-DevelopmentTips {
    Write-Header "CONSEJOS DE DESARROLLO"
    
    Write-Host "üí° MEJORES PR√ÅCTICAS:" -ForegroundColor Yellow
    Write-Host ""
    Write-Host "‚Ä¢ Siempre hacer backup antes de cambios grandes" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Usar branches para nuevas funcionalidades" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Documentar cambios importantes" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Probar en local antes de push a GitHub" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üîç HERRAMIENTAS √öTILES:" -ForegroundColor Yellow
    Write-Host "‚Ä¢ Git status: git status" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Ver logs: Get-Content logs\app.log -Tail 20" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Reiniciar backend: Get-Process python | Stop-Process -Force" -ForegroundColor Cyan
    Write-Host "‚Ä¢ Verificar APIs: .\API_VALIDATION_REPORT.md" -ForegroundColor Cyan
}

# FUNCI√ìN PRINCIPAL
function Main {
    Write-Header "üöÄ INICIO DE SESI√ìN - SISTEMA POS O'DATA ENTERPRISE v2.0.0"
    Write-Host "¬°Bienvenido de vuelta! Continuando donde terminamos ayer..." -ForegroundColor Green
    Write-Host ""
    
    # Verificar estado del sistema
    Test-SystemHealth
    
    # Iniciar sistema si es necesario
    if (-not $QuickStart) {
        if (-not $global:BackendStatus -or -not $global:FrontendStatus) {
            Start-System
            # Verificar nuevamente despu√©s de iniciar
            Start-Sleep -Seconds 3
            Test-SystemHealth
        }
    }
    
    # Mostrar estado actual
    Show-SystemStatus
    
    if ($FullValidation) {
        Write-Header "VALIDACI√ìN COMPLETA DEL SISTEMA"
        Write-Status "Ejecutando validaci√≥n completa..." "Info"
        
        # Validaci√≥n adicional
        Write-Status "Verificando base de datos..." "Info"
        Write-Status "Verificando APIs..." "Info"
        Write-Status "Verificando frontend..." "Info"
        Write-Status "‚úÖ Validaci√≥n completa terminada" "Success"
    }
    
    # Mostrar plan del d√≠a
    Show-TodaysPlan
    
    # Mostrar acciones r√°pidas
    Show-QuickActions
    
    # Mostrar consejos de desarrollo
    Show-DevelopmentTips
    
    Write-Header "üéØ ¬°LISTO PARA TRABAJAR!"
    Write-Host "El sistema est√° funcionando y listo para continuar el desarrollo." -ForegroundColor Green
    Write-Host "¬°Que tengas un excelente d√≠a de trabajo!" -ForegroundColor Green
    Write-Host ""
}

# EJECUTAR SCRIPT
Main
